name: Build and Push Frontend and Backend Docker Images

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  build-and-push-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            latest

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            VITE_MAPBOX_ACCESS_TOKEN=${{ secrets.GPXBASE_MAPBOX_TOKEN }}

      - name: Display frontend image info
        run: |
          echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}"
          echo "Release Tag: ${{ github.ref_name }}"
          echo "All Tags: ${{ steps.meta-frontend.outputs.tags }}"

  build-and-push-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            latest

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          build-args: |
            PORT=8000
            ENV=production
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_SSL_MODE=${{ secrets.DB_SSL_MODE }}
            DB_MAX_CONNS=${{ secrets.DB_MAX_CONNS }}
            DB_MIN_CONNS=${{ secrets.DB_MIN_CONNS }}
            DB_MAX_CONN_LIFETIME=${{ secrets.DB_MAX_CONN_LIFETIME }}
            DB_MAX_CONN_IDLE_TIME=${{ secrets.DB_MAX_CONN_IDLE_TIME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}

      - name: Display backend image info
        run: |
          echo "Backend Image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}"
          echo "Release Tag: ${{ github.ref_name }}"
          echo "All Tags: ${{ steps.meta-backend.outputs.tags }}"

  cleanup-frontend-images:
    needs: build-and-push-frontend
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Cleanup old frontend images
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          owner: ${{ github.repository_owner }}
          repository: ${{ github.event.repository.name }}
          package: nau-mcit-693/frontend
          keep-n-tagged: 3
          delete-untagged: true

  cleanup-backend-images:
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Cleanup old backend images
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          owner: ${{ github.repository_owner }}
          repository: ${{ github.event.repository.name }}
          package: nau-mcit-693/backend
          keep-n-tagged: 3
          delete-untagged: true 

  generate-artifacts:
    needs: [build-and-push-frontend, build-and-push-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate k8s deployment file
        env:
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          sed -i "s@__IMAGE_TAG__@$IMAGE_TAG@g" k8s/deployment.yml
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-deployment-${{ github.ref_name }}
          path: k8s/deployment.yml

  deploy-to-k8s:
    needs: generate-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-deployment-${{ github.ref_name }}
      - name: scp to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          source: deployment.yml
          target: ${{ secrets.DEPLOYMENTS_PATH }}/${{ github.ref_name }}
      - name : apply deployment by ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: |
            kubectl apply -f ${{secrets.DEPLOYMENTS_PATH}}/${{ github.ref_name }}/deployment.yml